// This config is in the KDL format: https://kdl.dev
// "/-" comments out the following node.
// Check the wiki for a full description of the configuration:
// https://yalter.github.io/niri/Configuration:-Introduction

spawn-sh-at-startup "runsvdir ~/.config/services"
screenshot-path "~/Pictures/Screenshots/Screenshot from %Y-%m-%d %H-%M-%S.png"
prefer-no-csd

environment {
    ELECTRON_OZONE_PLATFORM_HINT "auto"
}

input {
    keyboard {
        xkb { layout "eu"; }
        numlock
    }

    touchpad {
        tap
        natural-scroll
        accel-speed 0.2
        accel-profile "flat"
        scroll-method "two-finger"
    }

    mouse {
        natural-scroll
        accel-speed 0.2
        accel-profile "flat"
    }

    trackpoint { }
}


// Settings that influence how windows are positioned and sized.
// Find more information on the wiki:
// https://yalter.github.io/niri/Configuration:-Layout
layout {
    gaps 32
    center-focused-column "on-overflow"
    always-center-single-column
    empty-workspace-above-first

    preset-column-widths {
        proportion 0.33333
        proportion 0.5
        proportion 0.66667
        // fixed 1920
    }

    default-column-width { proportion 0.3333; }
    // default-column-width {}
    focus-ring {
       width 2
       // active-color "white"
       // inactive-color "red"
       urgent-color "#ff0000"
      // active-gradient from="hsl(190 100% 50% / 80%)" to="hsl(150 50% 50% / 80%)" angle=45 relative-to="workspace-view" in="oklch"
      // inactive-gradient from="#000000" to="#808080" angle=45 #relative-to="workspace-view"
    }

    border {
       // off
        width 6
        active-color "#0006"
        inactive-color "#0006"
        // Color of the border around windows that request your attention.
        urgent-color "#9b0000"
    }

    // You can enable drop shadows for windows.
    shadow {
        on
        softness 16
        spread 0
        offset x=8 y=16
        color "0008"
    }

    struts {
        left 96
        right 96
        top 16
        bottom 16
    }

    tab-indicator {
      place-within-column
      width 8
      gap 12
      gaps-between-tabs 24
      active-color "#7fc8ff"
      inactive-color "#000"
      corner-radius 8
      length total-proportion=0.666
      active-gradient from="hsl(190 100% 50% / 80%)" to="hsl(180 100% 50% / 80%)" angle=45 
      inactive-gradient from="hsl(330 10% 30% / 50%)" to="#808080" angle=45  in="oklch longer hue"
    }
}

hotkey-overlay {
    // Uncomment this line to disable the "Important Hotkeys" pop-up at startup.
    // skip-at-startup
}

// Animation settings.
// The wiki explains how to configure individual animations:
// https://yalter.github.io/niri/Configuration:-Animations
animations {
    // off
    // slowdown 3.0
    workspace-switch {
        spring damping-ratio=0.8 stiffness=1000 epsilon=0.0001
    }
    horizontal-view-movement {
        spring damping-ratio=0.8 stiffness=1000 epsilon=0.0001
    }
}

// Window rules let you adjust behavior for individual windows.
// Find more information on the wiki:
// https://yalter.github.io/niri/Configuration:-Window-Rules

// Work around WezTerm's initial configure bug
// by setting an empty default-column-width.
window-rule {
    // This regular expression is intentionally made as specific as possible,
    // since this is the default config, and we want no false positives.
    // You can get away with just app-id="wezterm" if you want.
    match app-id=r#"^org\.wezfurlong\.wezterm$"#
    default-column-width {} 
}

// Open the Firefox picture-in-picture player as floating by default.
window-rule {
    match app-id=r#"firefox$"# title="^Picture-in-Picture$"
    open-floating true
}

window-rule {
    match app-id=r#"column.sm$"#
    default-column-width { proportion 0.33333; }
}

window-rule {
    match app-id=r#"column.md$"#
    default-column-width { proportion 0.5; }
}

window-rule {
    match app-id=r#"column.lg$"#
    default-column-width { proportion 0.66667; }
}

window-rule {
    match app-id=r#"float.md$"#
    match app-id=r#"1Password$"#
    match app-id=r#"waypaper$"#
    match app-id=r#"clipse$"#
    open-floating true
    default-column-width { fixed 960; }
    default-window-height { fixed 800; }
}

window-rule {
    match app-id=r#"float.lg$"#
    match app-id=r#"NautilusPreviewer"#
    open-floating true
    default-column-width { fixed 1920; }
    default-window-height { fixed 1080; }
}

window-rule {
    match app-id=r#"pavucontrol$"#
    open-floating true
    default-column-width { fixed 480; }
    default-window-height { fixed 480; }
}

window-rule {
    match app-id=r#"1Password$"#
    match app-id=r#"chrome-app.fastmail"#
    match title=r#"Discord$"#
    match title=r#"Cinny$"#
    match title=r#"WhatsApp Web$"#
    match title=r#"Microsoft Teams$"#

    // block out from all captures: 
    block-out-from "screen-capture"

    // block out from screenshare (visible in screenshots)
    // block-out-from "screencast"
}

// Example: enable rounded corners for all windows.
// (This example rule is commented out with a "/-" in front.)
window-rule {
    geometry-corner-radius 5
    clip-to-geometry true
}

binds {
    // "Mod" is a special modifier equal to Super when running on a TTY, and to Alt
    // when running as a winit window.

    Mod+Shift+Slash { show-hotkey-overlay; }
    Mod+Return hotkey-overlay-title="Open a Terminal: kitty" { spawn-sh "kitty --single-instance zsh"; }
    Mod+B hotkey-overlay-title="Run Firefox" { spawn "firefox"; }
    Mod+Space hotkey-overlay-title="Run an Application: wofi" { spawn "wofi"; }
    Super+Alt+L hotkey-overlay-title="Lock the Screen: swaylock" { spawn "swaylock"; }
    Mod+Mod5+C hotkey-overlay-title="Cliboard History" { spawn-sh "cliphist list | wofi --dmenu --pre-display-cmd \"echo '%s' | cut -f 2\" | cliphist decode | wl-copy"; }
    Mod+Ctrl+Comma hotkey-overlay-title="Run Obsidian" { spawn "obsidian"; }
    Mod+Slash hotkey-overlay-title="1password" { spawn "1password"; }
    Mod+Semicolon { spawn-sh "kitty --class=float.md zsh"; }
    Mod+G hotkey-overlay-title="Goto" { spawn-sh "nox-menu --run niri/goto"; }
    Mod+X hotkey-overlay-title="Nox" { spawn "nox-menu"; }
    Mod+N hotkey-overlay-title="Notes" { spawn-sh "nox-menu --run notes"; }

    // Use spawn-sh to run a shell command. Do this if you need pipes, multiple commands, etc.
    // Note: the entire command goes as a single argument. It's passed verbatim to `sh -c`.
    // For example, this is a standard bind to toggle the screen reader (orca).
    Super+Alt+S allow-when-locked=true hotkey-overlay-title=null { spawn-sh "pkill orca || exec orca"; }

    // Example volume keys mappings for PipeWire & WirePlumber.
    // The allow-when-locked=true property makes them work even when the session is locked.
    // Using spawn-sh allows to pass multiple arguments together with the command.
    XF86AudioRaiseVolume allow-when-locked=true { spawn-sh "wpctl set-volume @DEFAULT_AUDIO_SINK@ 0.1+"; }
    XF86AudioLowerVolume allow-when-locked=true { spawn-sh "wpctl set-volume @DEFAULT_AUDIO_SINK@ 0.1-"; }
    XF86AudioMute        allow-when-locked=true { spawn-sh "wpctl set-mute @DEFAULT_AUDIO_SINK@ toggle"; }
    XF86AudioMicMute     allow-when-locked=true { spawn-sh "wpctl set-mute @DEFAULT_AUDIO_SOURCE@ toggle"; }

    // Example brightness key mappings for brightnessctl.
    // You can use regular spawn with multiple arguments too (to avoid going through "sh"),
    // but you need to manually put each argument in separate "" quotes.
    XF86MonBrightnessUp allow-when-locked=true { spawn "brightnessctl" "--class=backlight" "set" "+10%"; }
    XF86MonBrightnessDown allow-when-locked=true { spawn "brightnessctl" "--class=backlight" "set" "10%-"; }

    Mod+O repeat=false { toggle-overview; }
    Mod+Q repeat=false { close-window; }

    Mod+H          { focus-column-left; }
    Mod+L          { focus-column-right; }
    Mod+K          { focus-window-or-workspace-up; }
    Mod+J          { focus-window-or-workspace-down; }

    Mod+Left       { focus-column-left; }
    Mod+Right      { focus-column-right; }
    Mod+Up         { focus-window-or-workspace-up; }
    Mod+Down       { focus-window-or-workspace-down; }

    // + Ctrl to move
    Mod+Ctrl+H     { move-column-left; }
    Mod+Ctrl+L     { move-column-right; }
    Mod+Ctrl+K     { move-window-up-or-to-workspace-up; }
    Mod+Ctrl+J     { move-window-down-or-to-workspace-down; }
    Mod+Ctrl+Left  { move-column-left; }
    Mod+Ctrl+Right { move-column-right; }
    Mod+Ctrl+Up    { move-window-up-or-to-workspace-up; }
    Mod+Ctrl+Down  { move-window-down-or-to-workspace-down; }

    Mod+Home { focus-column-first; }
    Mod+End  { focus-column-last; }
    Mod+Ctrl+Home { move-column-to-first; }
    Mod+Ctrl+End  { move-column-to-last; }

    // Mod+Shift+Left  { focus-monitor-left; }
    // Mod+Shift+Down  { focus-monitor-down; }
    // Mod+Shift+Up    { focus-monitor-up; }
    // Mod+Shift+Right { focus-monitor-right; }
    // Mod+Shift+H     { focus-monitor-left; }
    // Mod+Shift+J     { focus-monitor-down; }
    // Mod+Shift+K     { focus-monitor-up; }
    // Mod+Shift+L     { focus-monitor-right; }

    Mod+Shift+Ctrl+Left  { move-column-to-monitor-left; }
    Mod+Shift+Ctrl+Down  { move-column-to-monitor-down; }
    Mod+Shift+Ctrl+Up    { move-column-to-monitor-up; }
    Mod+Shift+Ctrl+Right { move-column-to-monitor-right; }
    Mod+Shift+Ctrl+H     { move-column-to-monitor-left; }
    Mod+Shift+Ctrl+J     { move-column-to-monitor-down; }
    Mod+Shift+Ctrl+K     { move-column-to-monitor-up; }
    Mod+Shift+Ctrl+L     { move-column-to-monitor-right; }

    // Usually scrolling up and down with Shift in applications results in
    // horizontal scrolling; these binds replicate that.
    Mod+Shift+WheelScrollDown      { focus-column-right; }
    Mod+Shift+WheelScrollUp        { focus-column-left; }
    Mod+Ctrl+Shift+WheelScrollDown { move-column-right; }
    Mod+Ctrl+Shift+WheelScrollUp   { move-column-left; }

    Mod+1 { focus-workspace 1; }
    Mod+2 { focus-workspace 2; }
    Mod+3 { focus-workspace 3; }
    Mod+4 { focus-workspace 4; }
    Mod+5 { focus-workspace 5; }
    Mod+6 { focus-workspace 6; }
    Mod+7 { focus-workspace 7; }
    Mod+8 { focus-workspace 8; }
    Mod+9 { focus-workspace 9; }
    Mod+Ctrl+1 { move-window-to-workspace 1; }
    Mod+Ctrl+2 { move-window-to-workspace 2; }
    Mod+Ctrl+3 { move-window-to-workspace 3; }
    Mod+Ctrl+4 { move-window-to-workspace 4; }
    Mod+Ctrl+5 { move-window-to-workspace 5; }
    Mod+Ctrl+6 { move-window-to-workspace 6; }
    Mod+Ctrl+7 { move-window-to-workspace 7; }
    Mod+Ctrl+8 { move-window-to-workspace 8; }
    Mod+Ctrl+9 { move-window-to-workspace 9; }

    // Switches focus between the current and the previous workspace.
    Mod+Tab { focus-workspace-previous; }
    Mod+BracketLeft  { consume-or-expel-window-left; }
    Mod+BracketRight { consume-or-expel-window-right; }
    Mod+Comma  { consume-window-into-column; }
    Mod+Period { expel-window-from-column; }
    Mod+R { switch-preset-column-width; }
    Mod+Shift+R { switch-preset-window-height; }
    Mod+Ctrl+R { reset-window-height; }
    Mod+F { maximize-column; }
    Mod+Shift+F { fullscreen-window; }
    Mod+Ctrl+F { expand-column-to-available-width; }
    Mod+C { center-column; }
    Mod+Ctrl+C { center-visible-columns; }

    Mod+Minus { set-column-width "-10%"; }
    Mod+Equal { set-column-width "+10%"; }
    Mod+Shift+Minus { set-window-height "-10%"; }
    Mod+Shift+Equal { set-window-height "+10%"; }

    Mod+V       { toggle-window-floating; }
    Mod+Grave { switch-focus-between-floating-and-tiling; }

    Mod+W { toggle-column-tabbed-display; }

    Mod+Shift+4 { screenshot; }
    Mod+Shift+5 { screenshot-screen; }
    Print { screenshot; }
    Ctrl+Print { screenshot-screen; }
    Alt+Print { screenshot-window; }

    // Applications such as remote-desktop clients and software KVM switches may
    // request that niri stops processing the keyboard shortcuts defined here
    // so they may, for example, forward the key presses as-is to a remote machine.
    // It's a good idea to bind an escape hatch to toggle the inhibitor,
    // so a buggy application can't hold your session hostage.
    //
    // The allow-inhibiting=false property can be applied to other binds as well,
    // which ensures niri always processes them, even when an inhibitor is active.
    Mod+Escape allow-inhibiting=false { toggle-keyboard-shortcuts-inhibit; }

    Mod+Shift+E { quit; }
    Ctrl+Alt+Delete { quit; }
    Mod+Shift+P { power-off-monitors; }
}
