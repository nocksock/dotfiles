vim9script

# plugins {{{
if empty(glob('~/.vim/autoload/plug.vim'))
    silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin()
Plug 'junegunn/vim-easy-align'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-vinegar'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-fugitive'
Plug 'honza/vim-snippets'
Plug 'SirVer/ultisnips'
Plug 'tpope/vim-surround'
Plug 'SirVer/ultisnips'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-speeddating'
Plug 'tpope/vim-eunuch'
Plug 'simnalamburt/vim-mundo'
Plug 'mattn/emmet-vim'
Plug 'rose-pine/vim'
Plug 'airblade/vim-gitgutter'
call plug#end()

colorscheme rosepine

# }}}
# settings {{{
filetype plugin indent on

set noerrorbells
set textwidth=100
set scrolloff=10
set nomodeline
set splitright
set splitbelow
set hidden
set wildmenu
set formatoptions+=j

set timeout
set timeoutlen=750

set autoread
set history=1000

set path=.,**

# swap / undo / backup
set noswapfile
set nobackup
set nowritebackup
set undofile
set undodir=$RTP/undo

# tabs / indent / spaces
set tabstop=4
set shiftwidth=4
set softtabstop=4
set autoindent
set expandtab
set smarttab
set cindent

# basic completion
set complete-=i
set complete+=k
set completeopt=menuone,noinsert

# Reduce noise
set shortmess+=c
set shortmess+=C

# UI
set number
set relativenumber
set cursorline
set ruler
set laststatus=2
set showmatch
set incsearch
set signcolumn=yes
set mouse=a

set display+=lastline

# Grep
set grepprg=rg\ --vimgrep

# Quickfix
set qftf=quickfix.QFFormat

# Wrapping
set breakindent
set briopt=shift:4
set linebreak
set wrap

# }}}
# plugin settings {{{
g:netrw_altfile = 1 
g:netrw_banner = 0
g:netrw_winsize = 33

g:easy_align_delimiters = {
  # align \, which I often use in bash scripts etc.
  '\': { 'pattern': '\',  'left_margin': 1, 'right_margin': 0 },
}

# }}}
# Keymap {{{
xnoremap ga <Plug>(EasyAlign)
nnoremap ga <Plug>(EasyAlign)

nnoremap <c-p> :Files<cr>
nnoremap <c-b> :Buffers<cr>

nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

nnoremap <silent> <Up> <cmd>resize -4<cr>
nnoremap <silent> <Down> <cmd>resize +4<cr>
nnoremap <silent> <Left> <cmd>vertical resize -4<cr>
nnoremap <silent> <Right> <cmd>vertical resize +4<cr>
nnoremap <silent> <S-Up> <cmd>resize -12<cr>
nnoremap <silent> <S-Down> <cmd>resize +12<cr>
nnoremap <silent> <S-Left> <cmd>vertical resize -12<cr>
nnoremap <silent> <S-Right> <cmd>vertical resize +12<cr>

# More undo stops in insert mode
imap ! !<c-g>u
imap . .<c-g>u
imap : :<c-g>u
imap ; ;<c-g>u
imap ? ?<c-g>u
imap , ,<c-g>u

# List
nnoremap <leader>l <cmd>ls<cr>:b<space>
nnoremap <leader>m <cmd>marks<cr>:normal<space>'
nnoremap <leader>r <cmd>registers<cr>:normal<space>"
nnoremap <leader>s :Lines <c-r><c-w><cr>

# Toggle Quickfix
nnoremap <silent> <leader>q :call util#ToggleQuickfix()<cr>

# Grep
nnoremap <leader>g :Grep <c-r><c-w><cr>

# Line highlight
nnoremap <silent> <leader>H <cmd>call matchadd('LineHighlight', '\%' .. line('.') .. 'l')<cr>
nnoremap <silent> <leader>C <cmd>call clearmatches()<cr>

# split a line in two, making the right above the left (usefull to move comments)
nnoremap X i<cr><esc>ddkP

# Quickfix last spelling error
inoremap <C-l> <C-g>u<Esc>[s1z=`]a<C-g>u

# Better terminal exits
tnoremap <c-[> <C-\><C-n>
tnoremap <Esc> <C-\><C-n>

# Visual select last inserted text
nnoremap gV `[v`] 

# Remove trailing spaces
nnoremap <leader>dts mz:%s/ \+$//<cr>`z<cr>

# Misc shortcuts
nnoremap <leader>tu :MundoToggle<cr>
nnoremap _ :vnew .<cr>

g:UltiSnipsExpandTrigger       = "<tab>"
g:UltiSnipsJumpForwardTrigger  = "<c-b>"
g:UltiSnipsJumpBackwardTrigger = "<c-z>"
#}}}
# status line {{{
set statusline=%{statusline#GitBranch()}
set statusline+=\ \ %<%f\ %h%m%r
set statusline+=%=
set statusline+=\ \ %P%{\'\ \'}
#}}}

autocmd FileType typescript setlocal formatprg=prettier\ --parser\ typescript
