vim9script

# plugins {{{

packadd matchit
packadd cfilter

import autoload 'pack.vim'
import autoload 'completion.vim'

command! PackUpdate pack.Init() | minpac#update()
command! PackClean  pack.Init() | minpac#clean()
command! PackStatus pack.Init() | minpac#status()

# }}}
# settings {{{

syntax enable
filetype plugin indent on

g:mapleader = " "
set noerrorbells
set textwidth=100
set scrolloff=3
set nomodeline
set splitright
set splitbelow
set hidden
set wildmenu
set formatoptions+=j

set timeout
set timeoutlen=750

set autoread
set history=1000

set path=.,**

# swap / undo / backup
set noswapfile
set nobackup
set nowritebackup
set undofile
set undodir=~/.vim/undo-history

# tabs / indent / spaces
set tabstop=4
set shiftwidth=4
set softtabstop=4
set autoindent
set expandtab
set smarttab
set cindent

# basic completion
set complete+=k,b,i
set completeopt=menuone,noinsert,preview

# Reduce noise
set shortmess+=cCsmnrf

# UI
set number
set relativenumber
set cursorline
set ruler
set laststatus=2
set showmatch
set incsearch
set signcolumn=yes
set mouse=a

set display+=lastline
set display+=truncate

# Grep
set grepprg=rg\ --vimgrep
set grepformat=%f:%l:%c:%m

# Wrapping
set breakindent
set briopt=shift:4
set linebreak
set wrap

# }}}
# plugin settings {{{

g:netrw_altfile = 1
g:netrw_banner = 0
g:netrw_winsize = 33

g:easy_align_delimiters = { '\\': { pattern: '\',  left_margin: 1, right_margin: 0 } }

g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-x': 'split',
  \ 'ctrl-v': 'vsplit',
  \ 'ctrl-q': 'fill_quickfix'}

# }}}
# colors {{{

set termguicolors
colorscheme lunaperche
set bg=dark

hi LineHighlight guibg=#106060 guifg=NONE gui=None cterm=bold

# }}}
# Key map {{{

xnoremap ga <Plug>(EasyAlign)
nnoremap ga <Plug>(EasyAlign)

nnoremap <c-f> :Files<cr>
nnoremap <c-b> :Buffers<cr>
nnoremap <leader>C :Colors<cr>
nnoremap <leader>/ :RG<cr>

cnoremap <expr> %%  getcmdtype() == ':' ? expand('%:h').'/' : '%%'
cnoremap <expr> tt  getcmdtype() == ':' ? "terminal " : 'tt'

nnoremap ]c <cmd>cn<cr>
nnoremap [c <cmd>cp<cr>
nnoremap ]l <cmd>lnext<cr>
nnoremap [l <cmd>lprev<cr>

# More undo stops in insert mode
imap ! !<c-g>u
imap . .<c-g>u
imap : :<c-g>u
imap ; ;<c-g>u
imap ? ?<c-g>u
imap , ,<c-g>u

# List
nnoremap <leader>l <cmd>ls<cr>:b<space>
nnoremap <leader>m <cmd>marks<cr>:normal<space>'
nnoremap <leader>r <cmd>registers<cr>:normal<space>"
nnoremap <leader>s :Lines<cr>

# Line highlight
nnoremap <silent> <leader>H <cmd>call matchadd('LineHighlight', '\%' .. line('.') .. 'l')<cr>
nnoremap <silent> <leader>C <cmd>call clearmatches()<cr>

# Quickfix last spelling error
inoremap <C-h> <C-g>u<Esc>[s1z=`]a<C-g>u

# Better terminal exits
tnoremap <c-[> <C-\><C-n>
tnoremap <Esc> <C-\><C-n>

# Visual select last inserted text
nnoremap gV `[v`]

# Remove trailing spaces
nnoremap <leader>dts mz:%s/ \+$//<cr>`z<cr>

# Misc shortcuts
nnoremap <leader>tu :MundoToggle<cr>
nnoremap <c-w>- :vnew .<cr>

# Completion
inoremap <c-space> <c-x><c-o>

nnoremap ciaw viw*<esc>:%s///<left>
nnoremap ciaW viW*<esc>:%s///<left>
nnoremap caaw vaw*<esc>:%s///<left>
nnoremap caaW vaW*<esc>:%s///<left>

nnoremap <leader>hs <cmd>GitGutterStageHunk<cr>
nnoremap <leader>hr <cmd>GitGutterRevertHunk<cr>

g:UltiSnipsExpandTrigger       = "<c-l>"
g:UltiSnipsJumpForwardTrigger  = "<c-l>"
g:UltiSnipsJumpBackwardTrigger = "<c-h>"

#}}}
# lsp config {{{

# currently none

# g:lsp_log_file = expand('~/vim-lsp.log')
# g:lsp_show_message_log_level = 'none'
# g:lsp_diagnostics_signs_delay = 250
# g:lsp_diagnostics_echo_cursor = 1
# g:lsp_diagnostics_virtual_text_enabled = 0
# g:lsp_diagnostics_signs_error = {'text': ''}
# g:lsp_diagnostics_signs_warning = {'text': ''}
# g:lsp_diagnostics_signs_information = {'text': '󰋽'}
# g:lsp_diagnostics_signs_hint = {'text': '‼'}
# g:lsp_document_code_action_signs_hint = {'text': '󰻷'}
# g:lsp_format_sync_timeout = 1000
# g:lsp_use_native_client = 1
# g:lsp_diagnostics_virtual_text_enabled = 1
# g:lsp_diagnostics_virtual_text_align = "after"

# augroup lsp_install
#     au!
#     au User lsp_buffer_enabled call g:snock#LspBindings()
# augroup END

# }}}
# commands {{{
# Grep

command! -nargs=+ Grep  execute 'silent grep! <args>' | copen | wincmd p | redraw!

# Completion
command! ComplEnable  completion.Enable()
command! ComplDisable completion.Disable()

# }}}
