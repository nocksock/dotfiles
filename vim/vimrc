vim9script

# plugins {{{
if empty(glob('~/.vim/autoload/plug.vim'))
    silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

packadd! matchit
packadd! cfilter

call plug#begin()
# filenavigation
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'tpope/vim-vinegar'

# lsp
Plug 'prabirshrestha/vim-lsp'
Plug 'mattn/vim-lsp-settings'

# autocomplete
# Plug 'prabirshrestha/asyncomplete.vim'
# Plug 'prabirshrestha/asyncomplete-lsp.vim'
Plug 'honza/vim-snippets'
Plug 'mattn/emmet-vim'
Plug 'github/copilot.vim'

# versioning
Plug 'tpope/vim-fugitive'
Plug 'simnalamburt/vim-mundo'

# vim convenience
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-scriptease'
Plug 'tpope/vim-eunuch'
Plug 'christoomey/vim-tmux-navigator',

# code convenience
Plug 'junegunn/vim-easy-align'
Plug 'tpope/vim-commentary'

# ui
Plug 'airblade/vim-gitgutter'
Plug 'rose-pine/vim'
call plug#end()

colorscheme rosepine

# }}}
# settings {{{
filetype plugin indent on

g:mapleader = " "
set noerrorbells
set textwidth=100
set scrolloff=3
set nomodeline
set splitright
set splitbelow
set hidden
set wildmenu
set formatoptions+=j

set timeout
set timeoutlen=750

set autoread
set history=1000

set path=.,**

# swap / undo / backup
set noswapfile
set nobackup
set nowritebackup
set undofile
set undodir=$RTP/undo

# tabs / indent / spaces
set tabstop=4
set shiftwidth=4
set softtabstop=4
set autoindent
set expandtab
set smarttab
set cindent

# basic completion
set complete-=i
set complete+=k
set completeopt=menuone,noinsert,preview

# Reduce noise
set shortmess+=cCsmnrf

# UI
set number
set relativenumber
set cursorline
set ruler
set laststatus=2
set showmatch
set incsearch
set signcolumn=yes
set mouse=a

set display+=lastline

# Grep
set grepprg=rg\ --vimgrep
set grepformat=%f:%l:%c:%m

# Wrapping
set breakindent
set briopt=shift:4
set linebreak
set wrap

g:lsp_log_file = expand('~/vim-lsp.log')
g:lsp_show_message_log_level = 'none'
g:lsp_diagnostics_signs_delay = 250
g:lsp_diagnostics_echo_cursor = 1
g:lsp_diagnostics_virtual_text_enabled = 0
g:lsp_diagnostics_signs_error = {'text': ''}
g:lsp_diagnostics_signs_warning = {'text': ''}
g:lsp_diagnostics_signs_information = {'text': '󰋽'}
g:lsp_diagnostics_signs_hint = {'text': '‼'}
g:lsp_document_code_action_signs_hint = {'text': '󰻷'}
g:lsp_format_sync_timeout = 1000
g:lsp_use_native_client = 1
g:lsp_diagnostics_virtual_text_enabled = 1
g:lsp_diagnostics_virtual_text_align = "after"

# }}}
# plugin settings {{{
g:netrw_altfile = 1 
g:netrw_banner = 0
g:netrw_winsize = 33

# align \, which I often use in bash scripts etc.
g:easy_align_delimiters = { '\\': { pattern: '\',  left_margin: 1, right_margin: 0 } }

# }}}
# Keymap {{{
xnoremap ga <Plug>(EasyAlign)
nnoremap ga <Plug>(EasyAlign)

nnoremap <c-p> :Files<cr>
nnoremap <c-b> :Buffers<cr>

nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

nnoremap <silent> <Up> <cmd>resize -4<cr>
nnoremap <silent> <Down> <cmd>resize +4<cr>
nnoremap <silent> <Left> <cmd>vertical resize -4<cr>
nnoremap <silent> <Right> <cmd>vertical resize +4<cr>
nnoremap <silent> <S-Up> <cmd>resize -12<cr>
nnoremap <silent> <S-Down> <cmd>resize +12<cr>
nnoremap <silent> <S-Left> <cmd>vertical resize -12<cr>
nnoremap <silent> <S-Right> <cmd>vertical resize +12<cr>

# More undo stops in insert mode
imap ! !<c-g>u
imap . .<c-g>u
imap : :<c-g>u
imap ; ;<c-g>u
imap ? ?<c-g>u
imap , ,<c-g>u

# List
nnoremap <leader>l <cmd>ls<cr>:b<space>
nnoremap <leader>m <cmd>marks<cr>:normal<space>'
nnoremap <leader>r <cmd>registers<cr>:normal<space>"
nnoremap <leader>s :Lines <c-r><c-w><cr>

# Toggle Quickfix
nnoremap <silent> <leader>q :call util#ToggleQuickfix()<cr>

# Grep
nnoremap <leader>g :Grep <c-r><c-w><cr>

# Line highlight
nnoremap <silent> <leader>H <cmd>call matchadd('LineHighlight', '\%' .. line('.') .. 'l')<cr>
nnoremap <silent> <leader>C <cmd>call clearmatches()<cr>

# split a line in two, making the right above the left (usefull to move comments)
nnoremap X i<cr><esc>ddkP

# Quickfix last spelling error
inoremap <C-l> <C-g>u<Esc>[s1z=`]a<C-g>u

# Better terminal exits
tnoremap <c-[> <C-\><C-n>
tnoremap <Esc> <C-\><C-n>

# Visual select last inserted text
nnoremap gV `[v`] 

# Remove trailing spaces
nnoremap <leader>dts mz:%s/ \+$//<cr>`z<cr>

# Misc shortcuts
nnoremap <leader>tu :MundoToggle<cr>
nnoremap _ :vnew .<cr>

# autocompletion
inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr>    pumvisible() ? asyncomplete#close_popup() : "\<cr>"
imap <c-space> <Plug>(asyncomplete_force_refresh)

g:UltiSnipsExpandTrigger       = "<tab>"
g:UltiSnipsJumpForwardTrigger  = "<c-b>"
g:UltiSnipsJumpBackwardTrigger = "<c-z>"
#}}}
# status line {{{
set statusline=%<%f%h%m%r
set statusline+=%=
set statusline+=%{statusline#GitBranch()}
# set statusline+=\ \ %P%{\'\ \'}
#}}}
# lsp configs {{{
# typescript {{{
var tsserver = {
    'name': 'typescript-language-server',
    'cmd': (server_info) => [&shell, &shellcmdflag, 'typescript-language-server --stdio'],
    'root_uri': (server_info) => lsp#utils#path_to_uri(
        lsp#utils#find_nearest_parent_file_directory(lsp#utils#get_buffer_path(), 'tsconfig.json')
    ),
    'whitelist': ['typescript', 'typescript.tsx', 'typescriptreact'] }

augroup lsp_install
    au!
    au User lsp_setup call lsp#register_server(tsserver)
    au User lsp_buffer_enabled call g:snock#LspBindings()
augroup END
# }}}
# }}}
