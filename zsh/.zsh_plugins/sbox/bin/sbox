#!/usr/bin/env zsh
zparseopts -D -E -F -A args t:: c:: l:: s::

SBOX_LAUNCHER=${SBOX_LAUNCHER:-tmux}
SBOX_DIR="${SBOX_DIR:-$SBOX_DIR}"

export SBOX_PATHS=(
	"$HOME/code/sandboxes"
	"$HOME/code/bleepbloop.git/main/packages"
	"$HOME/code/bleepbloop.git/main/apps"
)

if [[ -z "$SBOX_PATHS" ]]; then
	echo "\$SBOX_PATHS not set"
	exit 1
fi

if [[ -z $SBOX_DIR ]]; then
  echo "\$SBOX_DIR not set"
  return 1
fi

get-start-dir () { # {{{
	zparseopts -D -E -F -A args t: s::
	local name="${args[-s]}"
	local template="${args[-t]}"
	local folder="$(dirname $template)"

	local name_prefill=$(basename $template | sed 's/^[[:digit:]]*-[[:digit:]]*-//')

	if [[ -z $name ]]; then
		name="$(gum input --prompt="name: " --value="$name_prefill--")"
	fi

	if [[ -z $name ]]; then
		echo "cancelled" >&2
		exit 1
	fi

	name=${name// /-}
	name=${name//[^[:alnum:]-]/}

	local full_path="$folder/$name"
	if [[ ! -e $full_path ]]; then
		echo "$full_path"
	else
		echo "already exists: $full_path" >&2
		exit 1
	fi
} # }}}
choose-template () { # {{{
	zparseopts -D -E -F -A args t::
	local template="${args[-t]}"
	if [[ ! -z $template ]]; then
		if [[ -d "$SBOX_DIR/$template" ]]; then
			echo "$template"
			return
		else
			echo "template not found: $template" >&2
			return 1
		fi
	fi

	local -a templates=()
	for p in "${SBOX_PATHS[@]}"; do
		for t in $(\ls -1 -t "$p"); do
			templates+=("$p/$t")
		done
	done

	printf '%s\n' "${templates[@]}"                    \
    | sed "s#$HOME#~#"                               \
		| fzf --height 90% --layout=reverse              \
			--prompt="select source: "                     \
			--preview-window=down                          \
			--preview="sbox-preview {}"                    \
			--bind="enter:accept,ctrl-o:execute(tm-p {1})" \
    | sed "s#~#$HOME#"                  

} # }}}
build () { # {{{
	zparseopts -D -E -F -A args t: c:
	local target=${args[-c]}
	local template=${args[-t]}
	
	mkdir -p "$target"
	rsync -av "$template/" $target

} # }}}
launch () { # {{{
	zparseopts -D -E -F -A args c: l:
	local name="$(basename ${args[-c]})"
	local new_sbox="${args[-c]}"

	if [[ -z $1 ]]; then
		if [[ -f "$new_sbox/.sboxrc" ]]; then
			# TODO: call script with args rather than sourcing
			tmux new-session -d \
				-s "$name"        \
				-c "$new_sbox"    \
				"(source $new_sbox/.sboxrc && launch)"
		else
			tmux new-session -d \
				-s "$name"        \
				-c "$new_sbox"
		fi

		if [[ $TMUX ]]; then
			tmux switch-client -t=$name
		else
			tmux attach-session -t=$name
		fi
	fi
} # }}}

local template=$(choose-template -t "${args[-t]}")

if [[ -z $template ]]; then
  echo "abort: no template chosen"
  return;
fi

local new_sbox=$(get-start-dir -t "$template" -s "${args[-s]:-${@}}")
if [[ -z $new_sbox ]]; then
  echo "abort: no name given."
  return;
fi

local launcher="${args[-l]:-$SBOX_LAUNCHER}"

build         -c "$new_sbox" -t "$template" \
	&& launch   -c "$new_sbox" -l "$launcher"
