#!/usr/bin/env zsh

NOTE_DIR=$HOME/brain/HEAP/heap/
LAST_NOTE_STORE=$HOME/.last_note

zparseopts -D -E -A opts -- t+::=tags d=d h=help r T::=title

usage () { cat <<-EOF
	usage: note [-t tag] [-T title] [-d] [--] <text...>

	    -h         : help
	    -t <tag>   : add <tag> to note. can be used multiple times.
			-T <title> :
	    --         : everything after this is text

			these are exclusive:
			-r         : restore last note (even if it wasn't saved, uses \$LAST_NOTE_STORE)
	    -d         : detach. aka don't open note in editor

	Examples:
	    note -t vim -t zsh vim is better than emacs
			note -t test -T "Some title" -- this is a test
	    note -t zsh to have flags/options in the text use -- to separate -t foobar
	EOF
}

if [[ -n $opts[(I)-h] ]]; then
	usage
	return 0
fi

make-tags () {
	for tag in ${tags[@]}; do
		printf " #${tag#-t}"
	done
}

make-links () {
	if [[ -n $links ]]; then
		local linked=()
		for link in ${links[@]}; do
			linked+="[[${link#-l}]]"
		done
		printf " about ${(Fj:, :)linked}"
	fi
}

text=${@}
content=$(cat <<-EOF
	#quicknote$(make-tags)$(make-links)

	${text#-- }

	$pb
	EOF
)

filename=$(date +%Y%m%d%H%M%S).md
filepath=$NOTE_DIR$filename

if [[ -z $opts[(I)-r] ]]; then
	echo $filepath > $LAST_NOTE_STORE
	echo $content >> $LAST_NOTE_STORE
fi

if [[ -n $opts[(I)-r] ]]; then
	tail +2 $LAST_NOTE_STORE | nvim -c "norm gggqG" -c "file $filepath" -
elif [[ -n $d ]]; then
	echo "stored in $filepath"
	echo $content > $filepath
else
	echo $content | nvim -c "norm gggqG" -c "file $filepath" -
fi

