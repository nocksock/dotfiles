#!/usr/bin/env zsh

NOTE_DIR=$HOME/code/bleepbloop.studio/content/notes/
LAST_NOTE_STORE=$HOME/.last_note
DEFAULT_TAG="quicknote"

zparseopts -D -E -A opts -- t+::=tags d=d h=help r T::=title l+::=links

usage () { cat <<-EOF
	usage: note [-t tag] [-T title] [-d] [--] <text...>

			-h         : help
			-t <tag>   : add <tag> to note. can be used multiple times.
			-l <page>  : add link to <page> to note. uses [[wikilink]] style. can be used multiple times
			-T <title> : set a title, uses timestamp by default (title = filename)
			--         : everything after this is text

			these are exclusive:
			-r         : restore last note (even if it wasn't saved, uses \$LAST_NOTE_STORE)
			-d         : detached. aka don't open note in editor

	All notes get a #quicknote tag, to easily review and filter them.

	Examples:
			note -t vim -t zsh vim is better than emacs
			note -t test -T "Some title" -- this is a test
			note -t zsh to have flags/options in the text use -- to separate -t foobar

	Text can also be supplied via stdin. Text passed in via args will prefix the stdin

			echo "abc" | note -t snippet -l zsh easy as:

		will create a note with the content:

				#quicknote #test about [[zsh]]

				easy as:

				abc

	EOF
}

if [[ -n $opts[(I)-h] ]]; then
	usage
	return 0
fi

make-tags () {
	local hashtags=("${DEFAULT_TAG}")
	for tag in ${tags[@]}; do
		hashtags+="${tag#-t}"
	done
	echo "tags: [${(Fj:,:)hashtags}]\n"
}

make-links () {
	if [[ -n $links ]]; then
		local linked=()
		for link in ${links[@]}; do
			linked+="\"${link#-l}\""
		done
		echo "related: [${(Fj:, :)linked}]\n"
	fi
}

make-date () {
	echo  "date: $(date -u -Iminutes)\n"
}

text=${@#-- }

if [[ ! -t 0 ]]; then
	stdin=$(</dev/stdin)
fi

local frontmatter=()
frontmatter+=$(make-tags)
frontmatter+=$(make-links)
frontmatter+=$(make-date)

content=$(cat <<-EOF
	---
	${(Fj:\n:)frontmatter[@]:#}
	---

	${text}

	${stdin}

	EOF
)

filename=$(date +%Y%m%d%H%M%S).md
filepath=$NOTE_DIR$filename

if [[ -z $opts[(I)-r] ]]; then
	echo $filepath > $LAST_NOTE_STORE
	echo $content >> $LAST_NOTE_STORE
fi

if [[ -n $opts[(I)-r] ]]; then
	tail +2 $LAST_NOTE_STORE | nvim -c "norm gggqG" -c "file $filepath" -
elif [[ -n $d ]]; then
	echo "stored in $filepath"
	echo $content > $filepath
else
	echo $content | nvim -c "norm ggg=GGo " -c "file $filepath" -
fi
