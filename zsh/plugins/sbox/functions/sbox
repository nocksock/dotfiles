#!/usr/bin/env zsh
#
#          d8b
#          ?88
#           88b
#  .d888b,  888888b  d8888b ?88,  88P
#  ?8b,     88P `?8bd8P' ?88 `?8bd8P'
#    `?8b  d88,  d8888b  d88 d8P?8b,
# `?888P' d88'`?88P'`?8888P'd8P' `?8b
#
# $ sbox
#    a helper to quickly create local code sandboxes

if [[ -z $SBOX_TEMPLATE_DIR ]]; then
  echo "\$SBOX_TEMPLATE_DIR not set"
  return 1
fi

if [[ -z $SBOX_DEFAULT_START_DIR_PARENT ]]; then
  echo "\$SBOX_DEFAULT_START_DIR_PARENT not set"
  return 1
fi

sbox-random-name() { # {{{
	zparseopts -D -E -F -A opts n::
  paste -s -d '-' <(cat /usr/share/dict/web2 | shuf | head -n 3 | tr '[:upper:]' '[:lower:]') | sed 's/ /-/g'
} # }}}
sbox-get-start-dir () { # {{{
	zparseopts -D -E -F -A args t: s::
	local name="${args[-s]}"
	local template="${args[-t]}"

	if [[ $name == ./* ]]; then
		echo "$(pwd)/${name#./}"
	else
		local datestamp="$(date "+%Y%m%d-%H%M")"

		if [[ -z $name ]]; then
			name="$(gum input --prompt="name: " --value="$datestamp-$template")"
		fi

		if [[ -z $name ]]; then
			echo "cancelled" >&2
			exit 1
		fi

		name=${name// /-}

		local full_path="$SBOX_DEFAULT_START_DIR_PARENT$name"
		if [[ ! -e $full_path ]]; then
			echo "$full_path"
		else
			echo "already exists: $full_path" >&2
			exit 1
		fi
	fi
} # }}}
sbox-choose-template () { # {{{
	zparseopts -D -E -F -A args t::
	local template="${args[-t]}"
	if [[ ! -z $template ]]; then
		if [[ -d "$SBOX_TEMPLATE_DIR/$template" ]]; then
			echo "$template"
			return
		else
			echo "template not found: $template" >&2
			return 1
		fi
	fi

	local -a templates=()
	for t in $(\ls -1 "$SBOX_TEMPLATE_DIR"); do
		templates+=("$t")
	done
	printf '%s\n' "${templates[@]}" | fzf --height 40% --layout=reverse --prompt="Choose template: "
} # }}}
sbox-build () { # {{{
	zparseopts -D -E -F -A args t: c:
	local start_dir=${args[-c]}
	local template=${args[-t]}
	local origin="$SBOX_TEMPLATE_DIR${template}"
	
	if [[ ! -d $origin ]]; then
		echo "template not found: $origin" >&2
		return 1
	fi

	mkdir "$start_dir"
	rsync --exclude node_modules --exclude .next -av "$origin/" "$start_dir"

	if [[ -x "$start_dir/init.sh" ]]; then
		"$start_dir/init.sh" # && \rm "$start_dir/init.sh"
	fi
} # }}}
sbox-git () { # {{{
	zparseopts -D -E -F -A args t: c:
	pushd "${args[-c]}" &> /dev/null
	git rev-parse --is-inside-work-tree &> /dev/null
	if [[ ! $? -eq 0 ]]; then
		git init
	fi
	git add ${args[-c]}
	git commit -m "initial commit from template: ${args[-t]}"
	popd &> /dev/null
} # }}}
sbox-launch () { # {{{
	zparseopts -D -E -F -A args c: l:
	local name="$(basename ${args[-c]})"
	local start_dir="${args[-c]}"

	case ${args[-l]} in
		"tmux") sbox-tmux-launcher -s "$name" -c "$start_dir" ;;
		  "cd") cd "$start_dir" ;;
		   "*") echo "unknown launcher: $SBOX_DEFAULT_LAUNCHER" ;;
	esac
} # }}}

zparseopts -D -E -F -A args t:: c:: l:: s::

local template=$(sbox-choose-template -t "${args[-t]}")
if [[ -z $template ]]; then
  echo "abort: no template chosen"
  return;
fi

local start_dir=$(sbox-get-start-dir -t "$template" -s "${args[-s]:-${@}}")
if [[ -z $start_dir ]]; then
  echo "abort: no name given."
  return;
fi

local launcher="${args[-l]:-$SBOX_DEFAULT_LAUNCHER}"

sbox-build       -c "$start_dir" -t "$template" \
	&& sbox-git    -c "$start_dir" -t "$template" \
	&& sbox-launch -c "$start_dir" -l "$launcher"
