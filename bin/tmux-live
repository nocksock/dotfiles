#!/usr/bin/env bash
# small script to create a tmux session with a split to run a command on file
# change. A more generic version of live-jq.
#
# example usage:
#   tmux-live inspect.jq "jq -f inspect.jq inspect.json"

help() {
  echo "Usage: $0 <file-to-watch> <command>"
  echo "  tmux-live jq <jq-query-file> <json-file>"
  echo "  tmux-live grep <grep-file> <file-to-grep>"
  echo
  echo "example usage:"
  echo "  tmux-live inspect.jq \"jq -f inspect.jq inspect.json\""
  echo
  echo "shortcuts"
  echo "  -h, --help, help: show this help"
  echo "  jq: shortcut for jq"
  echo "  grep: shortcut for grep"
  exit 1;
} 

check_args() {
  # at least 2 args
  if [ "$#" -lt 2 ]; then
    echo -en "\x1b[31mNot enough arguments\x1b[0m\n"
    help
    exit 1;
  fi
}

file="$1"
command="${@:2}"

case "$1" in
  -h|--help|help)
    help
    exit 0;
    ;;
  jq)
    shift
    check_args $@
    file=$1
    command="jq -f $file $2"
    ;;
  grep)
    shift
    check_args $@
    file=$1
    command="grep -f $file $2"
esac

tmux_name="tmux-live:$file"

# create session if not within tmux session
if [ -z "$TMUX" ]; then
  tmux new-session -s $tmux_name
fi

# get current session
tmux_target=$(tmux display-message -p '#S:#I')

# create split
tmux split-pane -f -p 20 nvim $file

# run command in upper split
tmux send-keys -t $tmux_target.1 "watch-and-run $file $command" C-m
