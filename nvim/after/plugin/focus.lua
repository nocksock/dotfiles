-- local M = {}
--
-- function M.dim(buf, lnum)
--   -- use extmarks directly so we can set the priority
--   -- do a pcall instead to prevent spurious errors at the end of the doc
--   pcall(vim.api.nvim_buf_set_extmark, buf, ns, lnum, 0, {
--     end_line = lnum + 1,
--     end_col = 0,
--     hl_group = "FocusOutside",
--     hl_eol = true,
--     priority = 10000,
--   })
--   -- vim.api.nvim_buf_add_highlight(buf, ns, "Twilight", lnum, 0, -1)
-- end
-- function M.clear(buf, from, to)
--   from = from or 0
--   to = to or -1
--   if from < 0 then
--     from = 0
--   end
--   vim.api.nvim_buf_clear_namespace(buf, ns, from, to)
-- end
--
-- function M.get_visible(win)
--   local info = vim.fn.getwininfo(win)
--   return info[1].topline, info[1].botline + 1
-- end
--
-- function M.focus(win, from, to, dimmers)
--   if not vim.api.nvim_win_is_valid(win) then
--     return
--   end
--
--   local topline, botline = M.get_visible(win)
--
--   for l = topline, botline do
--     if l < from or l >= to then
--       dimmers[l] = true
--     end
--   end
-- end
--
--
-- function M.is_valid_buf(buf)
--   -- Skip special buffers
--   local buftype = vim.api.nvim_buf_get_option(buf, "buftype")
--   if buftype ~= "" then
--     return false
--   end
--
--   return true
-- end
--
-- function M.update(win)
--   win = win or vim.api.nvim_get_current_win()
--
--   if not M.enabled or not vim.api.nvim_win_is_valid(win) then
--     return false
--   end
--   local buf = vim.api.nvim_win_get_buf(win)
--   if not M.is_valid_buf(buf) then
--     return
--   end
--   local cursor = vim.api.nvim_win_get_cursor(win)
--   local from, to = M.get_context(buf, cursor[1] - 1)
--
--   local dimmers = {}
--   M.focus(win, from, to, dimmers)
--
--   for _, other in ipairs(vim.api.nvim_list_wins()) do
--     if other ~= win and vim.api.nvim_win_get_buf(other) == buf then
--       M.focus(other, from, to, dimmers)
--     end
--   end
--
--   M.clear(buf, from - 1, to - 1)
--
--   for lnum, _ in pairs(dimmers) do
--     M.dim(buf, lnum - 1)
--   end
-- end
--
-- vim.api.nvim_create_user_command("Focus", function ()
-- end)
--
-- -- local bufnr = vim.api.nvim_get_current_buf()
-- -- local start_pos = vim.api.nvim_buf_get_mark(bufnr, "<")
-- -- local end_pos = vim.api.nvim_buf_get_mark(bufnr, ">")
-- --
-- -- local start_line = start_pos[1]
-- -- local start_col = start_pos[2]
-- -- local end_line = end_pos[1]
-- -- local end_col = end_pos[2]
-- --
-- -- -- Range of visual selection
-- -- local range = {
-- --   start_line = start_line,
-- --   start_col = start_col,
-- --   end_line = end_line,
-- --   end_col = end_col
-- -- }
-- --
-- -- -- Use the range as needed
