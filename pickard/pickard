#!/usr/bin/env zsh

SELF_PATH=$(realpath $0)
SELF_DIR=$(dirname $SELF_PATH)
SELF_NAME=$(basename $SELF_PATH)

source $SELF_DIR/utils.zsh

usage() { cat <<EOF
  Usage $SELF_NAME [<PICKER> [<action> [<args>]]]

  Options:
    -h, --help      Show this message

  Actions:
    --launch, -x  convenience method that Handles labels and prefixes
                  to open in external apps etc.

  Examples:
    pickard                            # starts the main picker
    pickard projects                   # starts the projects picker
    pickard projects --list            # lists the projects
    pickard projects --pick <index>    # echoes the project at <index> from list
    pickard projects --view <index>    # creates the preview for the project at <index> from list
    pickars projects --open <index>    # opens the project at <index> from list
EOF
}

pick () {
  ls -1 $SELF_DIR/PICKER \
    | fzf --no-sort --track --reverse
}

zparseopts -D -E -A opts -help=h -exec=x -launch x -type:: -label:: l:: t:: --

_launch() {
  _log "Launching \"$@\" with \"$opts\""
  local cmd=${@}
  local label=${opts[--label]:-$opts[-l]}
  local type=${opts[--type]:-$opts[-t]}

  case $type in
    kitty) 
      local pid=$(kitty @ launch --type=os-window --title $label --cwd="$HOME" --hold zsh -c "$cmd" &)
      kitty @ close-window -m "id:$KITTY_WINDOW_ID" &
      kitty @ focus-window -m "id:$pid" &
      ;;
    tmux)  tmux new-window -n $label $cmd ;;
    *) notify-send -m "eval $cmd" ;;
  esac
}

if [[ -n $opts[(i)--launch] ]]; then
  _launch ${@}
  exit 0
fi

if [[ -n ${opts[(i)--help]} || -n ${opts[(i):-h]} ]]; then
  usage
  exit 0
fi

_log "Invoked with \"$@\""
PICKER=${1:-$(pick)}
if [[ -n $PICKER ]]; then
  PICKER_PATH="$SELF_DIR/PICKER/$PICKER" 

  if [[ ! -f $PICKER_PATH ]]; then
    echo
    echo "Error: $PICKER is not a valid picker"
    echo
    exit 1
  fi

   $PICKER_PATH ${@:2}
 else
  exit 1
fi
